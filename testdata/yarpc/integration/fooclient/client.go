// Code generated by thriftrw-plugin-yarpc
// @generated

package fooclient

import (
	"context"
	"github.com/andreiubr/yab/testdata/yarpc/integration"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
)

// Interface is a client for the Foo service.
type Interface interface {
	Bar(
		ctx context.Context,
		Arg *int32,
		opts ...yarpc.CallOption,
	) (int32, error)
}

// New builds a new client for the Foo service.
//
// 	client := fooclient.New(dispatcher.ClientConfig("foo"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "Foo",
			ClientConfig: c,
		}, opts...),
	}
}

func init() {
	yarpc.RegisterClientBuilder(func(c transport.ClientConfig) Interface {
		return New(c)
	})
}

type client struct {
	c thrift.Client
}

func (c client) Bar(
	ctx context.Context,
	_Arg *int32,
	opts ...yarpc.CallOption,
) (success int32, err error) {

	args := integration.Foo_Bar_Helper.Args(_Arg)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result integration.Foo_Bar_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = integration.Foo_Bar_Helper.UnwrapResponse(&result)
	return
}
